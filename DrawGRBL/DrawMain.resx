<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="serialPort1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>131, 17</value>
  </metadata>
  <data name="txtMacro.Text" xml:space="preserve">
    <value>MouseDown : 100 , 97 
MouseMove : 100 , 97
MouseMove : 105 , 97
MouseMove : 110 , 97
MouseMove : 115 , 97 
MouseMove : 120 , 97
MouseMove : 125 , 97
MouseMove : 130 , 97
MouseMove : 135 , 97
MouseMove : 140 , 97
MouseMove : 145 , 97
MouseMove : 150 , 97  
MouseMove : 155 , 97
MouseMove : 160 , 97 
MouseMove : 165 , 97 
MouseMove : 170 , 97
MouseMove : 175 , 97
MouseMove : 180 , 97
MouseMove : 185 , 97 
MouseUp   : 185 , 97
Delayed : 1 
MouseDown : 142 , 97
MouseMove : 142 , 97
MouseMove : 142 , 107
MouseMove : 142 , 117
MouseMove : 142 , 127
MouseMove : 142 , 137
MouseMove : 142 , 146
MouseMove : 142 , 156
MouseMove : 142 , 166
MouseMove : 142 , 176 
MouseMove : 142 , 186
MouseMove : 142 , 196
MouseMove : 142 , 206
MouseMove : 142 , 216 
MouseUp   : 142 , 216</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>G21
G90
S1000
F5000
G0Z0
M5
G4 P0.2
G90 G0 X0 Y0
G90 G0 Z0
M5
G4 P0.2
G21G90X100Y97F5000
M3S1000
G4 P0.2
G21G90X100Y97F5000
G21G90X105Y97F5000
G21G90X110Y97F5000
G21G90X115Y97F5000
G21G90X120Y97F5000
G21G90X125Y97F5000
G21G90X130Y97F5000
G21G90X135Y97F5000
G21G90X140Y97F5000
G21G90X145Y97F5000
G21G90X150Y97F5000
G21G90X155Y97F5000
G21G90X160Y97F5000
G21G90X165Y97F5000
G21G90X170Y97F5000
G21G90X175Y97F5000
G21G90X180Y97F5000
G21G90X185Y97F5000
M5
G4 P0.2
G21G90X185Y97F5000
M5
G4 P0.2
G21G90X142Y97F5000
M3S1000
G4 P0.2
G21G90X142Y97F5000
G21G90X142Y107F5000
G21G90X142Y117F5000
G21G90X142Y127F5000
G21G90X142Y137F5000
G21G90X142Y146F5000
G21G90X142Y156F5000
G21G90X142Y166F5000
G21G90X142Y176F5000
G21G90X142Y186F5000
G21G90X142Y196F5000
G21G90X142Y206F5000
G21G90X142Y216F5000
M5
G4 P0.2
G21G90X142Y216F5000
G21
G90
S1000
F5000
G0Z0
M5
G4 P0.2
G90 G0 X0 Y0
G90 G0 Z0</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>59</value>
  </metadata>
</root>